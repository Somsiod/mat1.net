// SPDX-License-Identifier: MIT  
pragma solidity ^0.8.0;  

contract StepEarn {  
    mapping(address => uint256) public rewards;  

    event RewardDistributed(address indexed user, uint256 amount);  
    event RewardClaimed(address indexed user, uint256 amount);  

    // Function to distribute rewards based on steps  
    function distributeRewards(address user, uint256 steps) public {  
        require(user != address(0), "Invalid address");  
        
        // Reward calculation logic  
        uint256 rewardAmount = steps / 100; // Example: 1 token for every 100 steps  

        require(rewardAmount > 0, "No rewards to distribute");  
        
        // Increase the rewards of the user  
        rewards[user] += rewardAmount;  

        emit RewardDistributed(user, rewardAmount);  
    }  

    // Function for users to claim their rewards  
    function claimRewards() public {  
        uint256 amount = rewards[msg.sender];  
        require(amount > 0, "No rewards available to claim");  

        // Transfer tokens from this contract to the user  
        // This assumes the contract is connected to an ERC20 token contract  
        // token.transfer(msg.sender, amount); // Uncomment this when you integrate with an ERC20 token  

        rewards[msg.sender] = 0; // Reset user's rewards after claiming  

        emit RewardClaimed(msg.sender, amount);  
    }  

    // Optional function to check the balance of rewards  
    function getRewards(address user) public view returns (uint256) {  
        return rewards[user];  
    }  
}